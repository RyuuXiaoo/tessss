import express from 'express'; import cors from 'cors'; import morgan from 'morgan'; import dotenv from 'dotenv';
import fs from 'fs'; import path from 'path'; import { fileURLToPath } from 'url'; import axios from 'axios';
dotenv.config(); const __filename=fileURLToPath(import.meta.url); const __dirname=path.dirname(__filename);
const app=express(); app.use(cors()); app.use(express.json()); app.use(morgan('dev')); app.use(express.static(path.join(__dirname,'public')));
const DATA_DIR=path.join(__dirname,'data'); const PRODUCTS=path.join(DATA_DIR,'products.json'); const ORDERS=path.join(DATA_DIR,'orders.json');
if(!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR,{recursive:true}); if(!fs.existsSync(PRODUCTS)) fs.writeFileSync(PRODUCTS, JSON.stringify({categories:['Streaming'],products:[]},null,2)); if(!fs.existsSync(ORDERS)) fs.writeFileSync(ORDERS, JSON.stringify([],null,2));
const cfg={ port:process.env.PORT||3000, key:process.env.PUBLIC_API_KEY||'RyuuXiao', adminKey:process.env.ADMIN_KEY||'CHANGE_ME_ADMIN_KEY', pajak:Number(process.env.PAJAK||'3'), windowMin:Number(process.env.PAYMENT_WINDOW_MINUTES||'30'), provider:{apikey:process.env.API_KEY||'RyuuXiao',username:process.env.API_USERNAME||'adjie22',token:process.env.API_TOKENORKUT||''}};
const read=f=>JSON.parse(fs.readFileSync(f,'utf-8')); const write=(f,d)=>fs.writeFileSync(f,JSON.stringify(d,null,2));
const guard=(req,res,next)=>{const k=req.query.apikey||req.headers['x-api-key']; if(k!==cfg.key) return res.status(401).json({status:false,message:'Invalid API key'}); next()};
const guardAdmin=(req,res,next)=>{const k=req.headers['x-admin-key']; if(k!==cfg.adminKey) return res.status(401).json({status:false,message:'Invalid admin key'}); next()};
const unit=p=>{const f=(p.stok[0]||'').split('|'); if(f.length>=6&&!isNaN(Number(f[5]))) return Number(f[5]); return Number(p.price||0)};
const ref=()=> 'TRX-'+Math.random().toString(36).slice(2,8).toUpperCase();
app.get('/api/products',guard,(req,res)=>{const d=read(PRODUCTS); const out=d.products.map(p=>({id:p.id,name:p.name,price:Number(p.price),category:p.category||'-',stok:p.stok.length,terjual:p.terjual||0})); res.json({status:true,products:out})});
app.get('/api/status',guard,(req,res)=>{const id=String(req.query.trx_id||''); const o=read(ORDERS); const ord=o.find(x=>x.trx_id===id); if(!ord) return res.status(404).json({status:false,message:'Not found'}); res.json({status:true,...ord})});
app.post('/api/order',guard,async(req,res)=>{try{const {product_id,qty=1,pay_now=false}=req.body||{}; const d=read(PRODUCTS); const p=d.products.find(x=>x.id===product_id); if(!p) return res.status(404).json({status:false,message:'Product not found'}); const q=Math.max(1,Number(qty)); if(p.stok.length<q) return res.status(400).json({status:false,message:`Stok tidak cukup. Tersedia: ${p.stok.length}`}); const harga=unit(p)*q; const fee=Math.ceil(harga*(cfg.pajak/100)); const total=harga+fee; const trx_id=ref(); const exp=Date.now()+cfg.windowMin*60*1000; const orders=read(ORDERS); const ord={trx_id,product_id,qty:q,base:harga,adminFee:fee,total,paid:false,delivered:false,created_at:Date.now()}; if(pay_now){ try{ const r=await axios.get('https://apii.ryuuxiao.biz.id/orderkuota/createpayment',{params:{apikey:cfg.provider.apikey,username:cfg.provider.username,token:cfg.provider.token,amount:total}}); if(r?.data?.status){ ord.qris={amount:total,image_url:r.data.result?.imageqris?.url,expires_at:exp}; } }catch(e){ console.error('createpayment error',e.message); } } orders.push(ord); write(ORDERS,orders); res.json({status:true,message:'Order dibuat',trx_id,total,...(ord.qris?{qris:ord.qris}:{})}); }catch(e){res.status(500).json({status:false,message:'Server error'})}});
app.post('/api/order/cancel',guard,(req,res)=>{const {trx_id}=req.body||{}; if(!trx_id) return res.status(400).json({status:false,message:'trx_id required'}); const o=read(ORDERS); const ord=o.find(x=>x.trx_id===trx_id); if(!ord) return res.status(404).json({status:false,message:'Order tidak ditemukan'}); if(ord.paid) return res.json({status:false,message:'Tidak bisa batalkan, sudah dibayar'}); ord.cancelled=true; write(ORDERS,o); res.json({status:true,message:'Transaksi QRIS dibatalkan.'})});
app.post('/api/admin/product',guardAdmin,(req,res)=>{const {id,name,price=0,category,desc,snk,profit=0}=req.body||{}; if(!id||!name) return res.status(400).json({status:false,message:'id & name required'}); const d=read(PRODUCTS); let p=d.products.find(x=>x.id===id); if(!p){p={id,name,price:Number(price),category,desc,snk,profit:Number(profit),terjual:0,stok:[]}; d.products.push(p)} else {p.name=name;p.price=Number(price);p.category=category;p.desc=desc;p.snk=snk;p.profit=Number(profit)} if(category&&!d.categories.includes(category)) d.categories.push(category); write(PRODUCTS,d); res.json({status:true,product:p})});
app.post('/api/admin/stock/add',guardAdmin,(req,res)=>{const {product_id,lines=[]}=req.body||{}; const d=read(PRODUCTS); const p=d.products.find(x=>x.id===product_id); if(!p) return res.status(404).json({status:false,message:'Product not found'}); const arr=lines.map(s=>String(s).trim()).filter(Boolean); p.stok.push(...arr); write(PRODUCTS,d); res.json({status:true,added:arr.length,stok:p.stok.length})});
app.post('/api/admin/stock/clear',guardAdmin,(req,res)=>{const {product_id}=req.body||{}; const d=read(PRODUCTS); const p=d.products.find(x=>x.id===product_id); if(!p) return res.status(404).json({status:false,message:'Product not found'}); p.stok=[]; write(PRODUCTS,d); res.json({status:true,message:'Stock cleared'})});
setInterval(async()=>{ try{ const o=read(ORDERS); const pend=o.filter(x=>!x.paid&&x.qris&&!x.cancelled&&Date.now()<(x.qris.expires_at||0)); if(pend.length===0) return; const r=await axios.get('https://apii.ryuuxiao.biz.id/orderkuota/mutasiqr',{params:{apikey:cfg.provider.apikey,username:cfg.provider.username,token:cfg.provider.token}}); const list=r?.data?.result||[]; if(!Array.isArray(list)) return; let changed=false; const d=read(PRODUCTS); for(const ord of pend){ const hit=list.find(x=>x.status==='IN'&&Number(String(x.kredit||'0').replace(/\./g,''))===Number(ord.total)); if(hit){ ord.paid=true; const p=d.products.find(pp=>pp.id===ord.product_id); const items=[]; for(let i=0;i<ord.qty;i++){ const line=p.stok.shift(); if(!line) break; const [email,pass,profil='-',pin='-',fa='-']=line.split('|'); items.push({email,password:pass,profil,pin,fa}) } p.terjual+=(items.length||0); ord.items=items; ord.delivered=true; write(PRODUCTS,d); changed=true; } } if(changed) write(ORDERS,o); }catch(e){} },10000);
app.get('*',(req,res)=>res.sendFile(path.join(__dirname,'public','index.html')));
app.listen(cfg.port,()=>console.log('Running on',cfg.port));
